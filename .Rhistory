g1
rm(g1)
g1 <- ggplot(mns, x=mns)
g1
g1 <- g1 + geom_histogram()
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram()
g1
g1 <- g1 + geom_abline(sim_mean)
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean)
g1 <- g1 + geom_vline(xintercept = theor_mean)
g1
rm(g1)
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean)
g1 <- g1 + geom_vline(xintercept = theor_mean)
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean)
g1 <- g1 + geom_vline(xintercept = theor_mean)
g1
library(ggplot2)
library(dplyr)
sessionInfo()            # for repeatability
set.seed(1007)           # for repeatability
lambda <- 0.2
theor_mean <- 1/lambda   # theoretical mean of exponential distribution
sd <- 1/lambda           # standard deviation
n <- 40                  # number of exponentials
n_sims <- 1000
mns = NULL
for (i in 1 : n_sims) mns = c( mns, mean( rexp(n_sims,lambda) ) )
hist(mns)                # simulation data plotted with no mean of means shown
sim_mean <- mean(mns)
# add sim_mean and theor_mean to the histogram
mns <- as.data.frame(mns)
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean)
g1 <- g1 + geom_vline(xintercept = theor_mean)
g1
g1 <- ggplot(mns, aes(x=mns), color="red")
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green", type="longdash")
g1 <- g1 + geom_vline(xintercept = theor_meanm, color="blue")
g1
g1 <- ggplot(mns, aes(x=mns, color="red"))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green", type="longdash")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="blue")
g1
g1 <- ggplot(mns, aes(x=mns, color="red"))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow")
g1
g1 <- ggplot(mns, aes(x=mns, color="red", binwidth=x))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow")
g1
g1 <- ggplot(mns, aes(x=mns, color="red", binwidth=10))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow")
g1
g1 <- ggplot(mns, aes(x=mns, color="black"))
g1 <- g1 + geom_histogram()
g1 <- g1 + geom_density(alpha = 0.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram(binwidth=1)
g1 <- g1 + geom_density(alpha = 0.1)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram(binwidth=10)
g1 <- g1 + geom_density(alpha = 0.1)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + geom_histogram(color="pink", binwidth=.1)
g1 <- g1 + geom_density(alpha = 0.1)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", ylab = "", xlab="means")
g1 <- g1 + geom_histogram(color="pink", binwidth=.1)
g1 <- g1 + geom_density(alpha = 0.1)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", ylab = "", xlab="means")
g1 <- g1 + geom_histogram(color="pink")
g1 <- g1 + geom_vline(xintercept = sim_mean, color="green")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", ylab = "", xlab="means")
g1 <- g1 + geom_histogram(color="pink", fill="pink")
g1 <- g1 + geom_vline(xintercept = sim_mean, color="red")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", ylab = "", xlab="means")
g1 <- g1 + geom_histogram(color="pink", fill="pink", alpha=.2)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="red")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
g1 <- g1 + geom_histogram(color="pink", fill="pink", alpha=.3)
g1
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", ylab = "", xlab="means")
g1 <- g1 + geom_histogram(color="pink", fill="pink", alpha=.3)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="red")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow", linetype="longdash")
g1
xlabel <= paste("simulated mean = ", sim_mean, "theoretical mean = ", theor_mean)
xlabel <- paste("simulated mean = ", sim_mean, "theoretical mean = ", theor_mean)
?round
xlabel <= paste("simulated mean = ", round(sim_mean, 2), "theoretical mean = ", round(theor_mean, 2))
xlabel
?signif
xlabel <= paste("simulated mean =", signif(sim_mean, 2), "theoretical mean =", theor_mean)
xlabel
round(sim_mean)
round(sim_mean, 2)
round(sim_mean, -1)
round(sim_mean, 4)
sm <- round(sim_mean, 4)
xlabel <= paste("simulated mean =", sm, "theoretical mean =", theor_mean)
xlabel <- paste("simulated mean =", sm, "theoretical mean =", theor_mean)
xlabel
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", x = xlabel, y = "")
g1 <- g1 + geom_histogram(color="tan", fill="tan", alpha=.3)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="red", linetype="longdash")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow")
g1
xlabel <- paste("simulated mean =", sm, ", theoretical mean =", theor_mean)
g1 <- ggplot(mns, aes(x=mns))
g1 <- g1 + labs(title = "Exponentials and means", x = xlabel, y = "")
g1 <- g1 + geom_histogram(color="tan", fill="tan", alpha=.3)
g1 <- g1 + geom_vline(xintercept = sim_mean, color="red", linetype="longdash")
g1 <- g1 + geom_vline(xintercept = theor_mean, color="yellow")
g1
View(mns)
var(mns)
View(mns)
e <- rexp(n_sims, lambda)# exponential distribution 40 exponentials, 1000 simulations
dat <- matrix(sample(e, sims*40, replace = TRUE),  sims, 40)
rmeans <- rowMeans(dat)
ndat <- cbind(dat, rmeans)
df <- as.data.frame(ndat)
e <- rexp(n_sims, lambda)# exponential distribution 40 exponentials, 1000 simulations
dat <- matrix(sample(e, n_sims*40, replace = TRUE),  sims, 40)
rmeans <- rowMeans(dat)
ndat <- cbind(dat, rmeans)
df <- as.data.frame(ndat)
e <- rexp(n_sims, lambda)# exponential distribution 40 exponentials, 1000 simulations
dat <- matrix(sample(e, n_sims*40, replace = TRUE),  n_sims, 40)
View(dat)
rmeans <- rowMeans(dat)
ndat <- cbind(dat, rmeans)
df <- as.data.frame(ndat)
View(df)
View(rmeans)
View(mns)
?dfbetas
?summary
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial")
mdl <- glm(ravenData$ravenWinNum ~ ravenData$ravenScore, family="binomial")
swirl()
library(swirl)
swirl()
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confit(mdl, 'date'))
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.valuse[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(log(visits+1) ~ date, poisson, hits)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
library("Rcpp", lib.loc="F:/Program Files/R/R-3.2.1/library")
library("devtools", lib.loc="F:/Program Files/R/R-3.2.1/library")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('ramnathv/rCharts')
Sys.getenv
Sys.getenv()
install_github('ramnathv/rCharts')
require(devtools)
install_github('ramnathv\rCharts')
install_github('ramnathv/rCharts')
library("tools", lib.loc="F:/Program Files/R/R-3.2.2/library")
install.packages("devtools")
require('devtools')
install_github('rCharts', 'ramnathv')
Sys.getenv()
env
Sys.getenv()
Sys.getenv()
Sys.getenv()
library('devtools')
library("tools", lib.loc="F:/R/R-3.2.2/library")
install.packages("devtools")
library("devtools", lib.loc="F:/R/R-3.2.2/library")
library("Rcpp", lib.loc="F:/R/R-3.2.2/library")
install_github('ramnathv/rCharts')
library(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
?train
library(pgmm)
data(olive)
olive = olive[,-1]
oliveTrain <- createDataPartition(y = olive$Area, list = FALSE)
# subsetting class way
otrain <- segmentationOriginal[oliveTrain,]
otest <- segmentationOriginal[-oliveTrain,]
dim(otrain); dim(otest)
library(pgmm)
data(olive)
olive = olive[,-1]
oliveTrain <- createDataPartition(y = olive$Area, list = FALSE)
# subsetting class way
otrain <- olive[oliveTrain,]
otest <- olive[-oliveTrain,]
dim(otrain); dim(otest)
oliveFit <- train(Area ~ ., method="rpart", data=otrain)
fancyRpartPlot(oliveFit)
library(pgmm)
data(olive)
olive = olive[,-1]
oliveTrain <- createDataPartition(y = olive$Area, list = FALSE)
# subsetting class way
otrain <- olive[oliveTrain,]
otest <- olive[-oliveTrain,]
dim(otrain); dim(otest)
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(caTools)
library(pgmm)
data(olive)
olive = olive[,-1]
oliveTrain <- createDataPartition(y = olive$Area, list = FALSE)
otrain <- olive[oliveTrain,]
otest <- olive[-oliveTrain,]
dim(otrain); dim(otest)
oliveFit <- train(Area ~ ., method="rpart", data=otrain)
oliveFit
oliveFit$finalModel
fancyRpartPlot(oliveFit$finalModel)
View(olive)
unique(olive$Area)
View(otest)
unique(otest$Area)
unique(otrain$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(SAheart)
dim(train);dim(test)
dim(trainSA);dim(testSA)
unique(SAheart$chd)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
??train
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modelFit <- train( y ~ ., method="rf", data=vowel.train )
modelFit <- train( y ~ ., method="rf", data=vowel.train )
varImp(modelFit)
setwd("F:/Documents/R/Data Products/petData")
xml.url <- "http://api.petfinder.com/pet.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=2000&output=full&location=CA"
xmlfile <- xmlTreeParse(xml.url)
library(XML)
xmlfile <- xmlTreeParse(xml.url)
pets <- xmltop[[3]]
xmltop=xmlRoot(xmlfile)
pets <- xmltop[[3]]
class(xmltop)
size(xmltop)
xmltop
xml.url <- "http://api.petfinder.com/pet.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&output=full&location=CA"
xmlfile <- xmlTreeParse(xml.url)
xmltop=xmlRoot(xmlfile)
pets <- xmltop[[3]]
petcatalog <- xmlSApply(pets, function(x) xmlSApply(x, xmlValue))
pets_df <- data.frame(t(petcatalog),row.names=NULL)
View(pets_df)
unique(pets_df$shelterId)
shelters <- unique(pets_df$shelterId)
shelters
class(shelters)
write.csv2(pets_df, "pData.csv")
mydata <- as.table(pets_df)
mydata <- as.matrix(pets_df)
View(mydata)
runApp()
library(shiny)
runApp()
runApp()
write.table(mydata, "pData.csv")
runApp()
newdata <- read.csv2("pData.csv")
View(newdata)
df <- pets_df
type(df$size)
class(df$size)
df$size <- as.character(df$size)
mydata <- select(df, id:size)
mydata$id <- as.numeric(mydata$id)
mydata$size <- as.factor(mydata$size)
mydata$sex <- as.factor(mydata$sex)
class(mydata)
class(mydata$sex)
mydata$sex <- as.character(mydata$sex)
mydata$sex <- as.factor(mydata$sex)
mydata$size <- as.character(mydata$size)
mydata$size <- as.factor(mydata$size)
mydata$age <- as.character(mydata$age)
mydata$age <- as.factor(mydata$age)
mydata$breeds <- as.character(mydata$breeds)
mydata$animal <- as.character(mydata$animal)
mydata$animal <- as.factor(mydata$animal)
mydata$name <- as.character(mydata$name)
mydata$shelterPetId <- as.character(mydata$shelterPetId)
class(mydata$id)
class(mydata$shelterId)
mydata$shelterId <- as.character(mydata$shelterId)
mydata$shelterId <- as.factor(mydata$shelterId)
write.table(mydata, "pData.csv")
write.csv2(mydata, "pdata.csv")
class(mydata)
summary(mydata)
str(mydata)
mydata$mix <- as.character(mydata$mix)
summary(mydata)
write.csv2(mydata, "pdata.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp("California Adoptable Animals", display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp()
runApp()
runApp()
View(mydata)
g <- ggplot(pets_df, aes(animal, fill=shelterId))
g <- g+geom_bar(stat="bin", position="dodge")
g
g <- ggplot(mydata, aes(animal, fill=shelterId))
g <- g+geom_bar(stat="bin", position="dodge")
g
num(mydata$shelterId == "CA766")
sum(mydata$shelterId == "CA766")
sum(mydata$shelterId == "WA526")
sum(mydata$shelterId == "CA716")
summary(mydata$shelterId)
bigS <- c("CA107", "CA1192", "CA1612", "CA1714", "CA607",
"CA673", "CA763", "CA774",
"CA436", "CA2386", "CA2224", "CA990", "CA766")
mydata <- filter(mydata, id %in% bigS)
newdata <- read.csv2("pData.csv")
pets_df <- newdata
class(pets_df$id)
class(pets_df$name)
mydata <- pets_df
bigS
d <- filter(mydata, id %in% bigS)
d <- filter(mydata, shelterId %in% bigS)
summary(d$shelterId)
View(d)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
xml.url <- "http://api.petfinder.com/shelter.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&output=full&location=CA"
xml_names <- xmlTreeParse(xml.url)
xml_namestop <- xmlRoot(xml_names)
namescat <- xmlSApply(xml_namestop, function(x) xmlSApply(x, xmlValue))
View(namescat)
namescat
summary(namescat)
namesc <- xml_namestop[[3]]
namescat <- xmlSApply(xml_namestop, function(x) xmlSApply(x, xmlValue))
View(namescat)
namescat
xml.url <- "http://api.petfinder.com/shelter.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&location=CA&format=json"
xmlnamesfile <- xmlTreeParse(xml.url)
xml.url <- "http://api.petfinder.com/shelter.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&location=CA&format=json"
xmlfile <- xmlTreeParse(xml.url)
xml.url <- "http://api.petfinder.com/shelter.find?key=72609e7b0d2fac5982ee204316157c6d&count=1000&location=CA&format=json"
xmlfile <- xmlTreeParse(xml.url)
xml.url <- "http://api.petfinder.com/pet.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&output=full&location=CA"
xmlfile <- xmlTreeParse(xml.url)
xml.url <- "http://api.petfinder.com/shelter.find?key=72609e7b0d2fac5982ee204316157c6d&id=CA803&count=1000&output=full&location=CA"
xmlfile <- xmlTreeParse(xml.url)
xmlfile
str(xmlfile)
xmltop <- xmlRoot(xlmfile)
xmltop <- xmlRoot(xmlfile)
names <- xmltop[[3]]
namecat <- xmlSApply(names, function(x) xmlSApply(x, xmlValue))
namecat
View(namecat)
names_df <- data.frame(t(namecat), row.names=NULL)
View(names_df)
dump(names_df, "ShelterNames.Rdmpd")
class(names_df)
class(names_df$id)
names_df$id <- as.character(names_df$id)
names_df$name <- as.character(names_df$name)
mynames <- select(names_df, id:name)
mynames
View(mynames)
write.matrix(mynames)
write.matrix(mynames, "mynames.csv")
runApp()
runApp()
library(RColorBrewer)
display.brewer.all()
display.brewer.all()
runApp()
?scale_fill_gradientn
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_fill_discrete
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("F:/Documents/R/Data Products/petData/data_products_assignment")
runApp()
deployApp()
shiny:deployApp()
shiny::deployApp()
runApp()
deployApp()
?deployApp
library(rsconnect)
deployApp()
setwd("F:/Documents/R/Data Products/petData/data_products_presentation")
setwd("F:/Documents/R/Data Products/petData/data_products_assignment/code")
runApp()
runApp()
setwd("F:/Documents/R/Data Products/petData/data_products_assignment/presentation")
